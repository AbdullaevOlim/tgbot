from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from requests import get_book_by_title_and_branch, get_faculties_by_book_and_branch, add_book_to_db, add_branch_to_db, get_book_by_title, update_book_field
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.future import select
from models import async_session, Branch, Book


router = Router()

class EditBookForm(StatesGroup):
    book_title = State()  # –î–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
    edit_field = State()  # –î–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    new_value = State()

# –î–æ–±–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
class EditBranchForm(StatesGroup):
    branch_name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
    new_branch_name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥
class Form(StatesGroup):
    book_title = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
    branch_name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
    command = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã (count_books –∏–ª–∏ count_faculties)

class AddBookForm(StatesGroup):
    book_data = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏

class AddBranchForm(StatesGroup):
    branch_name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.\n"
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "/count_books - –ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–Ω–∏–≥–∏ –≤ —Ñ–∏–ª–∏–∞–ª–µ.\n"
        "/count_faculties - –ü–æ—Å—á–∏—Ç–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–Ω–∏–≥–∞ –≤ —Ñ–∏–ª–∏–∞–ª–µ.\n"
        "/add_book - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.\n"
        "/add_branch - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.\n"
        "/edit_book - –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ.\n"
        "/edit_branch - –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª–∏–∞–ª–µ.\n"
        "/books - –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥\n"
    )

from sqlalchemy.orm import joinedload

@router.message(Command('books'))
async def cmd_books(message: Message):
    async with async_session() as session:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        result = await session.execute(
            select(Book)
            .options(joinedload(Book.branch))
        )
        books = result.scalars().all()

        if not books:
            await message.answer("üìö –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")
        else:
            books_list = "\n".join(
                f"üìñ {book.title} by {book.author} ({book.year_of_publication}) - Branch: {book.branch.name}, Copies: {book.copies_in_branch}"
                for book in books
            )
            await message.answer(f"–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:\n{books_list}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_book
@router.message(Command('add_book'))
async def cmd_add_book(message: Message, state: FSMContext):
    await state.set_state(AddBookForm.book_data)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ, –ê–≤—Ç–æ—Ä, –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π, –°—Ç–æ–∏–º–æ—Å—Ç—å, –§–∏–ª–∏–∞–ª, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –§–∞–∫—É–ª—å—Ç–µ—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_branch
@router.message(Command('add_branch'))
async def cmd_add_branch(message: Message, state: FSMContext):
    await state.set_state(AddBranchForm.branch_name)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /count_books
@router.message(Command('count_books'))
async def cmd_count_books(message: Message, state: FSMContext):
    await state.set_state(Form.command)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    await state.update_data(command='count_books')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
    await state.set_state(Form.book_title)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /count_faculties
@router.message(Command('count_faculties'))
async def cmd_count_faculties(message: Message, state: FSMContext):
    await state.set_state(Form.command)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    await state.update_data(command='count_faculties')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
    await state.set_state(Form.book_title)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏

@router.message(Command('edit_book'))
async def cmd_edit_book(message: Message, state: FSMContext):
    await state.set_state(EditBookForm.book_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_branch
@router.message(Command('edit_branch'))
async def cmd_edit_branch(message: Message, state: FSMContext):
    await state.set_state(EditBranchForm.branch_name)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /add_branch
@router.message(AddBranchForm.branch_name)
async def process_new_branch_name(message: Message, state: FSMContext):
    branch_name = message.text.strip()

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    branch_added = await add_branch_to_db(branch_name)

    if branch_added:
        await message.answer(f"–§–∏–ª–∏–∞–ª '{branch_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer(f"–§–∏–ª–∏–∞–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{branch_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã


@router.message(Form.book_title)
async def process_book_title(message: Message, state: FSMContext):
    book_title = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    command = data.get("command")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
    if command in ['count_books', 'count_faculties']:
        await state.update_data(book_title=book_title)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞:")
        await state.set_state(Form.branch_name)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ñ–∏–ª–∏–∞–ª–∞

@router.message(Form.branch_name)
async def process_branch_name(message: Message, state: FSMContext):
    branch_name = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    book_title = data.get("book_title")
    command = data.get("command")

    if command == 'count_books':
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–Ω–∏–≥–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–∏–ª–∏–∞–ª–µ
        copies = await get_book_by_title_and_branch(book_title, branch_name)
        if copies is not None:
            await message.answer(
                f"–í —Ñ–∏–ª–∏–∞–ª–µ '{branch_name}' –∏–º–µ–µ—Ç—Å—è {copies} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–Ω–∏–≥–∏ '{book_title}'."
            )
        else:
            await message.answer(f"–ö–Ω–∏–≥–∞ '{book_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∏–ª–∏–∞–ª–µ '{branch_name}'.")
    elif command == 'count_faculties':
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–Ω–∏–≥–∞
        faculties = await get_faculties_by_book_and_branch(book_title, branch_name)

        if faculties is not None:
            if faculties:
                # –í—ã–≤–æ–¥–∏–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã
                faculties_text = "\n".join([f"{i+1}. {faculty}" for i, faculty in enumerate(faculties)])
                await message.answer(
                    f"–ö–Ω–∏–≥–∞ '{book_title}' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö –≤ —Ñ–∏–ª–∏–∞–ª–µ '{branch_name}':\n"
                    f"{faculties_text}\n"
                    f"–í—Å–µ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: {len(faculties)}."
                )
            else:
                await message.answer(f"–ö–Ω–∏–≥–∞ '{book_title}' –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö –≤ —Ñ–∏–ª–∏–∞–ª–µ '{branch_name}'.")
        else:
            await message.answer(f"–ö–Ω–∏–≥–∞ '{book_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∏–ª–∏–∞–ª–µ '{branch_name}'.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã

@router.message(AddBookForm.book_data)
async def process_book_data(message: Message, state: FSMContext):
    book_data = message.text.strip()

    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç–æ–π
    try:
        data = [item.strip() for item in book_data.split(",")]

        if len(data) < 11:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 11 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.")

        title, author, publisher, year_of_publication, pages, illustrations, price, branch_name, copies_in_branch, students_borrowed, *faculties_using = data
        faculties_using = ', '.join(faculties_using)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        year_of_publication = int(year_of_publication)
        pages = int(pages)
        illustrations = int(illustrations)
        price = float(price)
        copies_in_branch = int(copies_in_branch)
        students_borrowed = int(students_borrowed)

        # –ü–æ–ª—É—á–∞–µ–º branch_id –ø–æ –∏–º–µ–Ω–∏ —Ñ–∏–ª–∏–∞–ª–∞
        async with async_session() as session:
            result = await session.execute(select(Branch).filter(Branch.name == branch_name))
            branch = result.scalars().first()

            if not branch:
                # –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                print(f"–§–∏–ª–∏–∞–ª '{branch_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª.")  # –õ–æ–≥–∏—Ä—É–µ–º
                new_branch = Branch(name=branch_name)  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª
                session.add(new_branch)
                await session.flush()  # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∏–ª–∏–∞–ª –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
                branch = new_branch
                print(f"–ù–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {branch.id}")  # –õ–æ–≥–∏—Ä—É–µ–º ID –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª–∏–∞–ª–æ–º
            await add_book_to_db(
                title, author, publisher, year_of_publication, pages, illustrations, price, 
                branch.id, copies_in_branch, students_borrowed, faculties_using,
                session  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            )

            await message.answer(f"–ö–Ω–∏–≥–∞ '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É!")

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {str(e)}.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}.")
    
    await state.clear()

@router.message(EditBookForm.book_title)
async def process_edit_book_title(message: Message, state: FSMContext):
    book_title = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    book = await get_book_by_title(book_title)
    if book:
        await state.update_data(book_id=book.id, book_title=book.title)
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ '{book_title}'. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
                             "1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏\n"
                             "2. –ê–≤—Ç–æ—Ä\n"
                             "3. –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ\n"
                             "4. –ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è\n"
                             "5. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü\n"
                             "6. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π\n"
                             "7. –°—Ç–æ–∏–º–æ—Å—Ç—å\n"
                             "8. –§–∏–ª–∏–∞–ª\n"
                             "9. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤\n"
                             "10. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –≤—ã–¥–∞–Ω–∞\n"
                             "11. –§–∞–∫—É–ª—å—Ç–µ—Ç—ã\n"
                             "12. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await state.set_state(EditBookForm.edit_field)
    else:
        await message.answer(f"–ö–Ω–∏–≥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{book_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@router.message(EditBookForm.edit_field)
async def process_edit_field(message: Message, state: FSMContext):
    choice = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fields = {
        "1": "title",
        "2": "author",
        "3": "publisher",
        "4": "year_of_publication",
        "5": "pages",
        "6": "illustrations",
        "7": "price",
        "8": "branch",
        "9": "copies_in_branch",
        "10": "students_borrowed",
        "11": "faculties_using",
    }

    if choice in fields:
        field = fields[choice]
        await state.update_data(field=field)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
        if field == "branch":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞:")
        else:
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field}':")
        await state.set_state(EditBookForm.new_value)
    elif choice == "12":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await state.clear()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")

@router.message(EditBookForm.new_value)
async def process_new_value(message: Message, state: FSMContext):
    new_value = message.text.strip()
    data = await state.get_data()
    book_id = data.get("book_id")
    field = data.get("field")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        if field == "year_of_publication" or field == "pages" or field == "illustrations" or field == "copies_in_branch" or field == "students_borrowed":
            new_value = int(new_value)
        elif field == "price":
            new_value = float(new_value)
        elif field == "faculties_using":
            # –§–∞–∫—É–ª—å—Ç–µ—Ç—ã –≤–≤–æ–¥—è—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–∞—è –∑–∞–ø—è—Ç–æ–π
            new_value = ', '.join(new_value.split(','))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await update_book_field(book_id, field, new_value)

        await message.answer(f"–ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_value}'.")
        await state.clear()
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
        await state.clear()

@router.message(EditBranchForm.branch_name)
async def process_branch_name_for_edit(message: Message, state: FSMContext):
    branch_name = message.text.strip()

    # –õ–æ–≥–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: '{branch_name}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∏–ª–∏–∞–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        result = await session.execute(select(Branch).filter(Branch.name == branch_name))
        branch = result.scalars().first()

    if branch:
        # –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        await state.update_data(branch_name=branch_name)
        await state.set_state(EditBranchForm.new_branch_name)
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞:")
    else:
        # –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–§–∏–ª–∏–∞–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{branch_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω

@router.message(EditBranchForm.new_branch_name)
async def process_new_edit_branch_name(message: Message, state: FSMContext):
    new_branch_name = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞)
    data = await state.get_data()
    old_branch_name = data.get("branch_name")

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞: '{new_branch_name}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∏–ª–∏–∞–ª —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    async with async_session() as session:
        result = await session.execute(select(Branch).filter(Branch.name == new_branch_name))
        existing_branch = result.scalars().first()

    if existing_branch:
        # –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–§–∏–ª–∏–∞–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{new_branch_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
    async with async_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∏–ª–∏–∞–ª —Å —Å—Ç–∞—Ä—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        result = await session.execute(select(Branch).filter(Branch.name == old_branch_name))
        branch = result.scalars().first()

        if branch:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
            branch.name = new_branch_name
            await session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ '{old_branch_name}' –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_branch_name}'.")
        else:
            await message.answer(f"–§–∏–ª–∏–∞–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{old_branch_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
